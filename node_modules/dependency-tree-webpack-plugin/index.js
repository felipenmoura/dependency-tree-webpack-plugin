const fs = require('fs');
class DependencyTreePlugin {
    constructor({ filename = 'dependency-tree.json' } = {}) {
        this.filename = filename;
    }
    apply(compiler) {
        compiler.hooks.emit.tapAsync(
            'DependencyTreePlugin',
            (compilation, callback) => {
                const stats = compilation.getStats().toJson();
                let pushData = {
                    entry: [],
                    modules: {},
                };
                stats.chunks.forEach((item1, index1)=> {
                    function dealItem(item) {
                        if(item.identifier.indexOf('node_modules') > -1){
                            // 是 node_modules 里的包
                            if(item.issuer.indexOf('node_modules') < 0){
                                let moduleName = item.identifier.match(/node_modules\/(.*)\//)[1];
                                let sencondName = moduleName.match(/^_([^\@]+)\@/) || moduleName.match(/^_(\@[^\@]+)\@/);
                                sencondName ? moduleName = sencondName[1].replace('_',"/") : null;
                                moduleName = 'node_modules/' + moduleName;
                                pushData.modules[item.issuer].push(moduleName);
                            }
                        }else {
                            // 非 node_modules 里的文件
                            pushData.modules[item.identifier] = pushData.modules[item.identifier] || [];
                            item.reasons.forEach((item2)=>{
                                if(!item2.moduleIdentifier) {
                                    return false;
                                }
                                let belongObj = pushData.modules[item2.moduleIdentifier] || [];
                                belongObj.push(item.identifier);
                                belongObj = Array.from(new Set(belongObj));
                                pushData.modules[item2.moduleIdentifier] = belongObj;
                            })
                        }
                    }
                    function dealModules(modules) {
                        modules.forEach((item) => {
                            if(item.modules){
                                dealModules(item.modules);
                            }else {
                                dealItem(item)
                            }
                        })
                    }
                    pushData.entry.push(item1.origins[0].request);
                    dealModules(item1.modules);
                })
                const fileContent = fs.readFileSync(this.filename);
                let fileObj = {};
                if(fileContent){
                    fileObj = JSON.parse(fileContent);
                }
                fileObj = { ...fileObj, ...pushData };
                fs.writeFileSync('1'+this.filename, JSON.stringify(stats.chunks,null,4));
                fs.writeFileSync(this.filename, JSON.stringify(fileObj,null,4));
                callback();
            },
        );
    }
};

exports.default = DependencyTreePlugin;